<?php
/**
 * @file
 * The Organization module.
 */

/**
 * Implements hook_permission().
 */
function organization_permission() {
  $permissions = array();
  $permissions['organization: administer'] = array(
    'title' => t('Administer organizations'),
    'restrict access' => TRUE,
  );

  $permissions['organization: create'] = array(
    'title' => t('Create organizations'),
  );

  $actions = array('view' => 'View', 'update' => 'Edit', 'delete' => 'Delete');
  foreach (array('own', 'any') as $rel) {
    foreach ($actions as $op => $action) {
      $permissions["organization: $op $rel"] = array(
        'title' => t("$action $rel organizations"),
      );
    }
  }

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function organization_menu() {
  $items = array();
  $items['user/%organization/delete'] = array(
    'title' => 'Delete',
    'access callback' => 'entity_access',
    'access arguments' => array('delete', 'user', 1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('organization_delete_form', 1),
    'file' => 'includes/organization.forms.inc',
    'type' => MENU_CALLBACK,
    'weight' => 2,
  );
  $items['user/%user/organizations/new'] = array(
    'title' => 'Create new organization',
    'access callback' => 'organization_access_create',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('organization_form', NULL, 1),
    'file' => 'includes/organization.forms.inc',
    'type' => MENU_LOCAL_ACTION,
    'weight' => 4,
  );
  $items['admin/config/people/organizations'] = array(
    'title' => 'Organizations',
    'description' => 'Administer organizations',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('organization: administer'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function organization_menu_alter(&$items) {
  foreach (organization_paths_to_block() as $path) {
    $items[$path]['access callback'] = 'organization_access_block_orgs';
  }
}

/**
 * Find paths that should be restricted to users, not organizations.
 *
 * @return string[]
 *   A list of user/%user/* paths that should not be for organizations.
 */
function organization_paths_to_block() {
  $paths = array(
    'user/%user/shortcuts',
    'user/%user/cancel',
    'user/%/organizations',
  );
  drupal_alter(__FUNCTION__, $paths);

  return $paths;
}

/**
 * Access callback for blocking access to 'user' paths for organizations.
 *
 * @return bool
 *   TRUE if access is granted, FALSE otherwise.
 */
function organization_access_block_orgs() {
  $uid = arg(1);
  $account = is_numeric($uid) ? user_load($uid) : FALSE;

  return $account && $account->bundle != 'organization';
}

/**
 * Access callback for creating an organization.
 *
 * @return bool
 *   TRUE if access is granted, FALSE otherwise.
 */
function organization_access_create() {
  return user_access('organization: create') || user_access('organization: administer');
}

/**
 * URI callback for an organization.
 *
 * @param object $org
 *   The organization entity.
 *
 * @return array
 *   An array containing 'path'.
 */
function organization_uri($org) {
  return array('path' => 'user/' . $org->uid);
}

/**
 * Implements hook_username_alter().
 */
function organization_username_alter(&$name, $account) {
  // We have to check the bundle property is set, because unfortunately Core and
  // others sometimes use format_username() with a hand-crafted $account object.
  if (isset($account->bundle) && $account->bundle == 'organization' && !empty($account->organization_name)) {
    $wrapper = entity_metadata_wrapper('user', $account);
    $name = $wrapper->organization_name->value();
  }
}

/**
 * Load callback for an organization.
 *
 * Intended as a menu load callback.
 *
 * @param int $uid
 *   The organization ID.
 *
 * @return object|FALSE
 *   An organization entity or FALSE if not found.
 */
function organization_load($uid) {
  $org = user_load($uid);
  if ($org && $org->bundle !== 'organization') {
    return FALSE;
  }

  return $org;
}

/**
 * Title callback for an organization.
 *
 * @param object $org
 *   The organization entity.
 *
 * @return string
 *   A title, not sanitized.
 */
function organization_title($org) {
  return organization_get_name($org);
}

/**
 * Implements hook_entity_info_alter().
 *
 * @see organization_module_implements_alter()
 */
function organization_entity_info_alter(&$entity_info) {
  $entity_info['user']['entity keys']['bundle'] = 'bundle';
  if (!isset($entity_info['user']['bundles'])) {
    $entity_info['user']['bundles'] = array();
  }
  $entity_info['user']['bundles'] += array(
    'user' => array(
      'label' => t('User'),
    ),
    'organization' => array(
      'label' => t('Organization'),
      'uri callback' => 'organization_uri',
      'admin' => array(
        'path' => 'admin/config/people/organizations',
        'access arguments' => array('organization: administer'),
      ),
    ),
  );

  // Add a Teaser view mode.
  $entity_info['user']['view modes'] += array(
    'teaser' => array(
      'label' => t('Teaser'),
      'custom settings' => TRUE,
    ),
  );

  // Set an access callback for all user objects.
  $entity_info['user']['access callback'] = 'organization_user_entity_access';

  // Note: we cannot add a Views controller class for 'user' entities without
  // also adding an entity API controller class. The latter causes all sorts of
  // things to break. So we will handle Views the old-fashioned way, in
  // organization_views_data_alter().
}

/**
 * Implements hook_module_implements_alter().
 *
 * Moves the hook_entity_info_alter() implementation to the bottom so it is
 * invoked after the Entity API module.
 *
 * @see organization_entity_info_alter()
 */
function organization_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'entity_info_alter' || $hook === 'menu_alter') {
    $group = $implementations['organization'];
    unset($implementations['organization']);
    $implementations['organization'] = $group;
  }
}

/**
 * Generic entity access callback for users.
 *
 * Delegates to the default Entity API behavior for non-organizational users.
 */
function organization_user_entity_access($op, $entity = NULL, $account = NULL, $entity_type = NULL) {
  if ($entity_type !== 'user') {
    return FALSE;
  }
  if (!$entity || $entity->bundle !== 'organization') {
    return entity_metadata_user_access($op, $entity, $account);
  }
  if (user_access('organization: administer', $account)) {
    return TRUE;
  }
  if ($op == 'create') {
    return user_access('organization: create', $account);
  }
  if (user_access('organization: ' . $op . ' any', $account)) {
    return TRUE;
  }

  $account = $account ?: $GLOBALS['user'];
  $owner = organization_get_owner($entity);
  $own = $owner->uid == $account->uid;

  return $own && user_access('organization: ' . $op . ' own', $account);
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function organization_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Get the owner of an organization.
 *
 * @param object $org
 *   The organization entity.
 *
 * @return object
 *   The user account of the organization's owner.
 */
function organization_get_owner($org) {
  return entity_metadata_wrapper('user', $org)
    ->organization_owner
    ->value();
}

/**
 * Get the name of an organization.
 *
 * @param object $org
 *   The organization entity.
 */
function organization_get_name($org) {
  $wrapper = entity_metadata_wrapper('user', $org);
  if (!empty($wrapper->organization_name)) {
    return $wrapper->organization_name->value();
  }

  return $org->name;
}

/**
 * Implements hook_user_presave().
 */
function organization_user_presave(&$edit, $account) {
  // For normal users, ensure the user account has a bundle set.
  if (!isset($account->bundle)) {
    $account->bundle = 'user';
  }
  // For organizations, ensure a name is set.
  elseif ($account->bundle === 'organization') {
    if (!isset($account->name)) {
      $account->name = organization_generate_username($account);
    }
  }
}

/**
 * Generate a new {users}.name property for an organization.
 *
 * @param object $org
 *   The organization entity.
 *
 * @return string
 *   A user name that is unique and valid according to Drupal Core's
 *   requirements.
 */
function organization_generate_username($org) {
  // Get the name, falling back to a random string if it's not available.
  $name = organization_get_name($org) ?: user_password();

  // Sanitize the name to remove illegal characters. See user_validate_name().
  $name = preg_replace('/[^\x{80}-\x{F7} a-z0-9@_.\'-]+/i', '--', $name);

  // Ensure the name will fit within the maximum length.
  $name = truncate_utf8($name, USERNAME_MAX_LENGTH - 2);

  // If the name is new, then ensure there are no duplicates.
  if ($name != $org->name) {
    for ($original = $name, $i = 1; organization_username_exists($name); $i++) {
      $name = $original . '_' . $i;
    }
  }

  return $name;
}

/**
 * Fast check for whether a username exists.
 *
 * @param string $name
 *   The username to check.
 *
 * @return bool
 *   TRUE if the username already exists, FALSE otherwise.
 */
function organization_username_exists($name) {
  return db_query('SELECT COUNT(*) FROM {users} WHERE name = :name', array(
    ':name' => $name,
  ))->fetchField() > 0;
}

/**
 * Implements hook_user_load().
 */
function organization_user_load($users) {
  foreach ($users as $account) {
    if ($account->bundle === 'organization') {
      // Set the organization's real e-mail address.
      $wrapper = entity_metadata_wrapper('user', $account);
      $account->mail = $wrapper->organization_mail->raw();
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Alter the user registration and cancel form.
 */
function organization_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_register_form':
    case 'user_profile_form':
      // Ensure the form contains a user 'bundle', so that validation works.
      $form += array(
        'bundle' => array(
          '#type' => 'value',
          '#value' => !empty($form_state['user']->bundle) ? $form_state['user']->bundle : 'user',
        ),
      );

      if ($form_state['user']->bundle === 'organization') {
        $form['#user_category'] = 'organization';
        unset(
          $form['account'],
          $form['picture'],
          $form['signature_settings'],
          $form['actions']['cancel']
        );
      }
      break;
  }
}

/**
 * Implements hook_field_access().
 */
function organization_field_access($op, $field, $entity_type, $entity, $account) {
  if ($entity_type === 'user') {
    switch ($field['field_name']) {
      // Ensure that normal users cannot change the organization owner.
      case 'organization_owner':
        return $op === 'view' || user_access('organization: administer', $account);

      // Ensure that non-owners cannot view the organization e-mail address.
      case 'organization_mail':
        if ($op === 'view') {
          return entity_access('update', 'user', $entity, $account);
        }
        break;
    }
  }
}

/**
 * Implements hook_field_attach_validate().
 */
function organization_field_attach_validate($entity_type, $entity, &$errors) {
  // Validate e-mail addresses in the organization_mail field.
  if ($entity_type === 'user' && !empty($entity->organization_mail)) {
    foreach ($entity->organization_mail as $lang => $items) {
      foreach ($items as $delta => $item) {
        if (!empty($item['value']) && !filter_var($item['value'], FILTER_VALIDATE_EMAIL)) {
          $errors['organization_mail'][$lang][$delta][] = array(
            'error' => 'organization_invalid_mail',
            'message' => t('Invalid e-mail address: %mail', array('%mail' => $item['value'])),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_user_view_alter().
 */
function organization_user_view_alter(&$build) {
  $account = $build['#account'];
  if ($account->bundle === 'organization') {
    // Remove the 'summary' (including 'History') from the organization page.
    unset($build['summary']);
  }
}

/**
 * Implements hook_user_login().
 *
 * Organizations should never be allowed to log in.
 */
function organization_user_login(&$edit, $account) {
  if ($account->bundle === 'organization') {
    watchdog('organization', 'Login attempt by organization @name (@id)', array(
      '@name' => organization_get_name($account),
      '@id' => $account->uid,
    ), WATCHDOG_ERROR);
    user_logout();
  }
}

/**
 * Implements hook_views_api().
 */
function organization_views_api() {
  return array('api' => 3);
}

/**
 * Implements hook_theme().
 */
function organization_theme() {
  return array(
    'organization' => array(
      'render element' => 'elements',
      'template' => 'organization',
      'file' => 'includes/organization.theme.inc',
    ),
  );
}

/**
 * Implements hook_entity_view_alter().
 */
function organization_entity_view_alter(&$build, $type) {
  if ($type === 'user' && isset($build['#bundle']) && $build['#bundle'] === 'organization') {
    $build['#theme'] = 'organization';
  }
}
